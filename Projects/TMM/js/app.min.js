/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// import * as functions from './modules/functions.js';\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\r\n  // ! Конструктор стойки\r\n  const Stand = function (x, y, length) {\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.length = length * size;\r\n\r\n  };\r\n\r\n  // ! Конструктор кривошипа\r\n  const Сrank = function (x1, y1, angle, length = 150, x2 = 0, y2 = 0) {\r\n\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n    this.angle = angle;\r\n    this.length = length * size;\r\n\r\n    this.x2 = x2;\r\n    this.y2 = y2;\r\n\r\n    this.rotate = function (angle, direction = false) {\r\n\r\n      angle = degreesToRadians(angle);\r\n\r\n      if (direction) {\r\n        this.x2 = x1 + length * size * Math.cos(this.angle += angle * rotateSpeed);\r\n        this.y2 = y1 - length * size * Math.sin(this.angle += angle * rotateSpeed);\r\n      } else {\r\n        this.x2 = x1 + length * size * Math.cos(this.angle -= angle * rotateSpeed);\r\n        this.y2 = y1 - length * size * Math.sin(this.angle -= angle * rotateSpeed);\r\n      }\r\n\r\n\r\n\r\n    };\r\n\r\n  };\r\n\r\n  // ! Конструктор осей\r\n  const Axes = function (x, y, length = 1000, startAngle, collapse) {\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.length = length * size;\r\n    this.startAngle = startAngle;\r\n    this.collapse = collapse;\r\n\r\n  };\r\n\r\n  // ! Конструктор шатуна\r\n  const Rod = function (x1, y1, x2, y2, length = 1000) {\r\n\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n    this.x2 = x2;\r\n    this.y2 = y2;\r\n    this.length = length * size;\r\n\r\n  };\r\n\r\n  // ! Конструктор Поршня\r\n  const Piston = function (x, y, width = 150, hight = 75) {\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width * size;\r\n    this.hight = hight * size;\r\n\r\n  };\r\n\r\n  const pi = Math.PI;\r\n  const size = 0.5;                                             // Размер чертежа\r\n\r\n  let rotationDirection = false;\r\n\r\n  let rotateSpeed = 2;                                          // Скорость вращения кривошипа\r\n  let collapse = 90;                                            // Угол развала цилиндров\r\n  let axesAngle = 30;                                            // Угол наклона развала цилиндров\r\n  let crankAngle = 60;                                          // Начальный угол поворота кривошипа\r\n  let hingeRadius = 10;                                         // Радиус шарниров\r\n\r\n  let lengthCrank = 190;                                        // Длина шатуна\r\n  let lengthRod = 760;                                          // Длина кривошипа 2 и 4\r\n  let topDeadPoint = (lengthRod + lengthCrank) * size;          // Верхняя мертвая точка\r\n  let bottomDeadPoint = (lengthRod - lengthCrank) * size;       // Нижняя мертвая точка\r\n\r\n  let rod2Angle;                                                // Угол поворота шатуна 2\r\n  let rod4Angle;                                                // Угол поворота шатуна 4\r\n  let projectionRod2Crank;                                      // Проекция кривошипа и шатуна 2 на ось X\r\n  let projectionRod4Crank;                                      // Проекция кривошипа и шатуна 4 на ось X\r\n\r\n\r\n\r\n  let canvas = document.getElementById('canvas');\r\n  let ctx = canvas.getContext('2d');\r\n\r\n  let width = document.documentElement.clientWidth;\r\n  let height = document.documentElement.clientHeight;\r\n\r\n  ctx.canvas.height = height;\r\n  ctx.canvas.width = width;\r\n\r\n  let stand = new Stand(width * 0.4, height * 0.8, 60);\r\n  let crank = new Сrank(stand.x, stand.y, degreesToRadians(crankAngle), lengthCrank);\r\n  let axes = new Axes(stand.x, stand.y, 1000, degreesToRadians(axesAngle), degreesToRadians(collapse));\r\n  let rod2 = new Rod();\r\n  let rod4 = new Rod();\r\n  let piston3 = new Piston();\r\n  let piston5 = new Piston();\r\n\r\n\r\n\r\n  // Функция анимации\r\n  function loop() {\r\n\r\n    window.requestAnimationFrame(loop);\r\n\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillRect(0, 0, width, height);\r\n    ctx.strokeStyle = '#ffffff';\r\n\r\n    // ! Вращение кривошипа\r\n    crank.rotate(1, false);\r\n\r\n    // ! Отрисовка осей поршней (направляющии хода цилиндров)\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'rgb(133,133,133)';\r\n    ctx.setLineDash([20, 10]);\r\n    ctx.moveTo(axes.x, axes.y);\r\n    ctx.lineTo(axes.x + axes.length * Math.cos(axes.startAngle), axes.y - axes.length * Math.sin(axes.startAngle));\r\n    ctx.moveTo(axes.x, stand.y);\r\n    ctx.lineTo(axes.x + axes.length * Math.cos(axes.startAngle + axes.collapse), axes.y - axes.length * Math.sin(axes.startAngle + axes.collapse));\r\n    ctx.stroke();\r\n    ctx.setLineDash([0, 0]);\r\n    ctx.closePath();\r\n\r\n    let pistonHatch = 5;\r\n    let stepPiston = piston3.width / (2 * pistonHatch);\r\n\r\n    // ! Отрисовка стойки у поршня 3\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 1;\r\n    ctx.moveTo(stand.x + (bottomDeadPoint - piston3.width) * Math.cos(axes.startAngle), stand.y - (bottomDeadPoint - piston3.width) * Math.sin(axes.startAngle));\r\n    ctx.lineTo(stand.x + (topDeadPoint + piston3.width) * Math.cos(axes.startAngle), stand.y - (topDeadPoint + piston3.width) * Math.sin(axes.startAngle));\r\n    ctx.save();\r\n    ctx.translate(stand.x + (bottomDeadPoint - piston3.width) * Math.cos(axes.startAngle), stand.y - (bottomDeadPoint - piston3.width) * Math.sin(axes.startAngle));\r\n    ctx.rotate(degreesToRadians(-axesAngle));\r\n    ctx.moveTo(0, piston3.hight / 4);\r\n    ctx.lineTo(piston3.width / 2, piston3.hight / 4);\r\n    for (let i = 1; i <= pistonHatch; i++) {\r\n      ctx.moveTo(stepPiston * i, piston3.hight / 4);\r\n      ctx.lineTo(stepPiston * i - stepPiston, piston3.hight / 4 + stepPiston);\r\n    }\r\n    ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5, piston3.hight / 4);\r\n    ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 2, piston3.hight / 4);\r\n    for (let i = 1; i <= pistonHatch; i++) {\r\n      ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i, piston3.hight / 4);\r\n      ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i - stepPiston, piston3.hight / 4 + stepPiston);\r\n    }\r\n    ctx.moveTo(0, -piston3.hight / 4);\r\n    ctx.lineTo(piston3.width / 2, -piston3.hight / 4);\r\n    for (let i = 0; i < pistonHatch; i++) {\r\n      ctx.moveTo(stepPiston * i, -piston3.hight / 4);\r\n      ctx.lineTo(stepPiston * i + stepPiston, -piston3.hight / 4 - stepPiston);\r\n    }\r\n    ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5, -piston3.hight / 4);\r\n    ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 2, -piston3.hight / 4);\r\n    for (let i = 0; i < pistonHatch; i++) {\r\n      ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i, -piston3.hight / 4);\r\n      ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i + stepPiston, -piston3.hight / 4 - stepPiston);\r\n    }\r\n    ctx.restore();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // ! Отрисовка стойки у поршня 5\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 1;\r\n    ctx.moveTo(stand.x + (bottomDeadPoint - piston5.width) * Math.cos(axes.startAngle + axes.collapse), stand.y - (bottomDeadPoint - piston5.width) * Math.sin(axes.startAngle + axes.collapse));\r\n    ctx.lineTo(stand.x + (topDeadPoint + piston5.width) * Math.cos(axes.startAngle + axes.collapse), stand.y - (topDeadPoint + piston5.width) * Math.sin(axes.startAngle + axes.collapse));\r\n    ctx.save();\r\n    ctx.translate(stand.x + (bottomDeadPoint - piston3.width) * Math.cos(axes.startAngle + axes.collapse), stand.y - (bottomDeadPoint - piston3.width) * Math.sin(axes.startAngle + axes.collapse));\r\n    ctx.rotate(degreesToRadians(-axesAngle-collapse));\r\n    ctx.moveTo(0, piston3.hight / 4);\r\n    ctx.lineTo(piston3.width / 2, piston3.hight / 4);\r\n    for (let i = 1; i <= pistonHatch; i++) {\r\n      ctx.moveTo(stepPiston * i, piston3.hight / 4);\r\n      ctx.lineTo(stepPiston * i - stepPiston, piston3.hight / 4 + stepPiston);\r\n    }\r\n    ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5, piston3.hight / 4);\r\n    ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 2, piston3.hight / 4);\r\n    for (let i = 1; i <= pistonHatch; i++) {\r\n      ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i, piston3.hight / 4);\r\n      ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i - stepPiston, piston3.hight / 4 + stepPiston);\r\n    }\r\n    ctx.moveTo(0, -piston3.hight / 4);\r\n    ctx.lineTo(piston3.width / 2, -piston3.hight / 4);\r\n    for (let i = 0; i < pistonHatch; i++) {\r\n      ctx.moveTo(stepPiston * i, -piston3.hight / 4);\r\n      ctx.lineTo(stepPiston * i + stepPiston, -piston3.hight / 4 - stepPiston);\r\n    }\r\n    ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5, -piston3.hight / 4);\r\n    ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 2, -piston3.hight / 4);\r\n    for (let i = 0; i < pistonHatch; i++) {\r\n      ctx.moveTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i, -piston3.hight / 4);\r\n      ctx.lineTo(topDeadPoint - bottomDeadPoint + piston3.width * 1.5 + stepPiston * i + stepPiston, -piston3.hight / 4 - stepPiston);\r\n    }\r\n    ctx.restore();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // ! Отрисовка стойки 0\r\n    let standHatch = 6; // Количество штрихов под стойкой\r\n    let step = stand.length / standHatch;\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = '#ffffff';\r\n    ctx.setLineDash([0, 0])\r\n    ctx.moveTo(stand.x, stand.y);\r\n    ctx.lineTo(stand.x + 1 / 2 * stand.length, stand.y + Math.sin(pi / 3) * stand.length);\r\n    ctx.lineTo(stand.x - 1 / 2 * stand.length, stand.y + Math.sin(pi / 3) * stand.length);\r\n    ctx.lineTo(stand.x, stand.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 1;\r\n    for (let i = 0; i < standHatch; i++) {\r\n      ctx.moveTo(stand.x + 1 / 2 * stand.length - step * i, stand.y + Math.sin(pi / 3) * stand.length);\r\n      ctx.lineTo(stand.x + 1 / 2 * stand.length - step * i - stand.length * 0.2, stand.y + Math.sin(pi / 3) * stand.length + stand.length * 0.2);\r\n    }\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 2;\r\n    ctx.arc(stand.x, stand.y, stand.length / 4, 0, 2 * pi);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // ! Подшипник на начале кривошипа\r\n    ctx.beginPath();\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.arc(crank.x1, crank.y1, hingeRadius * size, 0, 2 * pi);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n\r\n    // ! Отрисовка кривошипа 1\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 3;\r\n    ctx.moveTo(crank.x1, crank.y1);\r\n    crank.x2 = crank.x1 + crank.length * Math.cos(crank.angle);\r\n    crank.y2 = crank.y1 - crank.length * Math.sin(crank.angle);\r\n    ctx.lineTo(crank.x2, crank.y2);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // ! Подшипник на конце кривошипа\r\n    ctx.beginPath();\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.arc(crank.x1 + crank.length * Math.cos(crank.angle), crank.y1 - crank.length * Math.sin(crank.angle), hingeRadius * size, 0, 2 * pi);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n\r\n    // ! Отрисовка шатуна 2\r\n    rod2Angle = degreesToRadians(axesAngle) - Math.asin(lengthCrank / lengthRod * Math.sin(crank.angle - degreesToRadians(axesAngle)));\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 3;\r\n    ctx.moveTo(crank.x2, crank.y2);\r\n    rod2.x2 = crank.x2 + lengthRod * size * Math.cos(rod2Angle);\r\n    rod2.y2 = crank.y2 - lengthRod * size * Math.sin(rod2Angle);\r\n    ctx.lineTo(rod2.x2, rod2.y2);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // ! Подшипник на конце шатуна 2\r\n    ctx.beginPath();\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.arc(crank.x2 + lengthRod * size * Math.cos(rod2Angle), crank.y2 - lengthRod * size * Math.sin(rod2Angle), hingeRadius * size, 0, 2 * pi);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n\r\n    // ! Отрисовка шатуна 4\r\n    rod4Angle = degreesToRadians(axesAngle + collapse) - Math.asin(lengthCrank / lengthRod * Math.sin(crank.angle - degreesToRadians(axesAngle + collapse)));\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 3;\r\n    ctx.moveTo(crank.x2, crank.y2);\r\n    rod4.x2 = crank.x2 + lengthRod * size * Math.cos(rod4Angle);\r\n    rod4.y2 = crank.y2 - lengthRod * size * Math.sin(rod4Angle);\r\n    ctx.lineTo(rod4.x2, rod4.y2);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // ! Подшипник на конце шатуна 4\r\n    ctx.beginPath();\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.arc(crank.x2 + lengthRod * size * Math.cos(rod4Angle), crank.y2 - lengthRod * size * Math.sin(rod4Angle), hingeRadius * size, 0, 2 * pi);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n\r\n    // ! Рассчет проекции кривошипа и шатуна 2 на ось X\r\n    // rod2Angle = degreesToRadians(axesAngle) - Math.asin( lengthCrank / lengthRod * size * Math.sin(crank.angle  - degreesToRadians(axesAngle)) );\r\n    // projectionRod2Crank = (lengthCrank * size * Math.cos(crank.angle) + lengthRod * size * Math.cos(rod2Angle));\r\n    // piston3.x = stand.x + projectionRod2Crank * Math.cos(degreesToRadians(axesAngle));\r\n    // piston3.y = stand.y - projectionRod2Crank * Math.sin(degreesToRadians(axesAngle));\r\n\r\n    // ! Отрисовка поршня 3\r\n    ctx.beginPath();\r\n    ctx.save();\r\n    ctx.lineWidth = 3;\r\n    ctx.translate(rod2.x2, rod2.y2);\r\n    ctx.rotate(degreesToRadians(-axesAngle));\r\n    ctx.rect(-piston3.width / 2, -piston3.hight / 2, piston3.width, piston3.hight);\r\n    ctx.stroke();\r\n    ctx.restore();\r\n    ctx.closePath();\r\n\r\n    // ! Отрисовка поршня 5\r\n    ctx.beginPath();\r\n    ctx.save();\r\n    ctx.lineWidth = 3;\r\n    ctx.translate(rod4.x2, rod4.y2);\r\n    ctx.rotate(degreesToRadians(-axesAngle - collapse));\r\n    ctx.rect(-piston3.width / 2, -piston3.hight / 2, piston3.width, piston3.hight);\r\n    ctx.stroke();\r\n    ctx.restore();\r\n    ctx.closePath();\r\n\r\n    // ? Проверка расстояния\r\n    // console.log( Math.sqrt( Math.pow(rod2.x2 - crank.x2, 2) + Math.pow(rod2.y2 - crank.y2, 2) ) / size );\r\n\r\n  }\r\n  loop();\r\n\r\n  function degreesToRadians(degr) {\r\n    let rad = 0;\r\n    return rad = degr * Math.PI / 180;\r\n  }\r\n\r\n  function radiansToDegrees(rad) {\r\n    let degr = 0;\r\n    return degr = rad * 180 / Math.PI;\r\n  }\r\n\r\n})\r\n\r\n\n\n//# sourceURL=webpack://start/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;